include ../common/mixin

mixin user-input(text)
  span.user-input= text
  .clipboard
    i.fa.fa-clipboard(aria-hidden='true')

article.main-article(data-page='deeplearning-by-tensorflow')
  a#preface-part.in-page-anchor
  h1 TensorFlowのインストール(GPU利用編)
  +article-header('2017-03-06')

  .paragraph
    a#install-tensorflow.in-page-anchor
    p.warning-this-is-not-extra-content
      | このページはCUDAに対応したNVidia製グラフィックカードを持っている人向けの内容です。
    p
      | このページではGPU計算を有効にしたTensorFlowをインストールする手順を紹介します。
      | GPUは並列化処理に優れておりTensorFlowでの数値計算速度を向上させることができます。
    p
      | TensorFlowはCUDAと呼ばれる、NVidia社が開発した並列計算プラットフォームを利用して高速化させることができます。
      a(href='http://www.cs.nyu.edu/manycores/cuda_many_cores.pdf', target='_blank') CUDAについてはこちらを参考にしてください。

    h4 GPU版TensorFlowが利用できるNVidia GeForce GPU
    p
      | 2017年3月6日現在、
      a(href='https://www.tensorflow.org/install/install_sources#optional_install_tensorflow_for_gpu_prerequisites', target='_blank')
        | TensorFlowのインストールページ
      | ではCuda Compute Capability3.0以上のグラフィックカードが必要と記載されていいます。
      | CUDA 3.0以上対応GeForceグラフィックカードは下記のとおりです。
      | 参考:
      a(href='https://developer.nvidia.com/cuda-gpus', target='_blank') CUDA GPUs
      br
      | ざっと見たところ、6XX系以上のGeForceグラフィックカードを持っていれば大丈夫のようです。

    h6 デスクトップ版GeForce
    table.list-of-tensorflow-enabled-gpus
      tr
        td GTX 10XX系
        td 1080Ti, 1080, 1070, 1060, 1050
      tr
        td TITAN系
        td NVIDIA TITAN X, GTX TITAN X, GTX TITAN Z, GTX TITAN Black
      tr
        td GTX 9XX系
        td 980Ti, 980, 970, 960, 950
      tr
        td GTX 7XX系
        td 780Ti, 780, 770, 760, 750Ti, 750
      tr
        td GT 7XX系
        td GT740, GT730(*), GT720, GT705
      tr
        td GTX 6XX系
        td 690, 680, 670, 660Ti, 660, 650Ti BOOST, 650Ti, 650
      tr
        td GT 6XX系
        td GT640[GDDR5版]

    small (*) GT730 DDR3, 128bit版を除く

    h6 ノートブック版GeForce
    table.list-of-tensorflow-enabled-gpus
      tr
        td 10XX系
        td 1080, 1070, 1060
      tr
        td 9XX系
        td 980, 980M, 970M, 965M, 960M, 950M, 940M, 930M, 920M, 910M
      tr
        td 8XX系
        td 880M, 870M, 860M, 850M, 840M, 830M
      tr
        td 7XX系
        td 780M, 770M, 765M, 760M, 750M, 745M, 740M, 735M, 730M
      tr
        td GTX 6XX系
        td 680MX, 680M, 675MX, 670MX, 660M, 650M, 645M, 640M, 640M LE

    h4 インストール環境
    p
      | 手順を作成するにあたって用意したマシン環境です。
    table.install-environment
      tr
        td GPU
        td NVidia GeForce GTX 780
        td ASUS GTX780-DC2OC-3GD5
      tr
        td OS
        td Ubuntu 16.04 64bit
        td
          a(href='https://www.ubuntu.com/download/desktop', target='_blank')
            | Ubuntu Desktop
      tr
        td Python
        td 3.5.2
        td
          code
            | sudo apt-get install python3
      tr
        td TensorFlow
        td r1.0
        td
          a(href='https://github.com/tensorflow/tensorflow/tree/r1.0', target='_blank')
            | https://github.com/tensorflow/tensorflow/tree/r1.0

    h4 インストール手順
    p
      | Ubuntu 16.04/Python3.5/GPUサポート有り/GTX780/ソースインストール/virtualenv利用 の構成でのインストール手順を紹介します。
      br
      | ちなみにこの手順は2017/3/7に検証した手順であり、将来同じ手順で正しくTensorFlowをインストールできない可能性があります。
    h5 1. CUDA Tookitのインストール
    p
      | 参考:
      a(href='http://docs.nvidia.com/cuda/cuda-installation-guide-linux/#axzz4VZnqTJ2A', target='_blank') NVIDIA CUDA Installation Guide For Linux
    p CUDAが利用できるGPUが認識されているか確認
    .code
      .code-line
        | $&nbsp;
        +user-input('lspci | grep -i nvidia')
    p
      | ここで何も表示されない場合、NVIDIA製のグラフィックボードがインストールされていない、もしくは認識されていないため
      | これ以降の手順は実施できません。
    p
      | gccがインストールされていることを確認します。
    .code
      .code-line
        | $&nbsp;
        +user-input('gcc --version')
    p gcc 5.3.1以降がインストールされていればOK
    p Linuxカーネルヘッダーをインストールします。
    .code
      .code-line
        | $&nbsp;
        +user-input('sudo apt-get install linux-headers-$(uname -r)')
    p
      | Ubuntu 16.04用のCUDA Tookitをインストールします。
      br
      | まず、
      a(href='https://developer.nvidia.com/cuda-downloads', target='_blank') CUDAダウンロードページ
      | からUbuntu用debファイルをダウンロードします。
      br
      img.download-cuda-toolkit(src='image/deeplearning-by-tensorflow/download-cuda-toolkit.png')
      br
      | ダウンロードした.debファイルは/tmpに移動しておきます。
    p
      | cuda toolkitをインストールします。(インストールサイズが2GBほどあるので注意。ネットワークが遅いと数十分から数時間かかります。)
    .code
      .code-line
        | $&nbsp;
        +user-input('sudo dpkg -i /tmp/cuda-repo-ubuntu1604_8.0.61-1_amd64.deb')
      .code-line
        | $&nbsp;
        +user-input('sudo apt-get update')
      .code-line
        | $&nbsp;
        +user-input('sudo apt-get install cuda')
    p
      | 環境変数LD_LIBRARY_PATHを設定します。
    .code
      .code-line
        | $&nbsp;
        +user-input('export LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}')
      .code-line
        | $&nbsp;
        +user-input('echo "export LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}" >> ~/.profile')

    h5 2. cuDNNのインストール
    p
      | 参考:
      a(href='https://developer.nvidia.com/cudnn', target='_blank') NVIDIA cuDNN
    p
      | cuDNNはディープラーニング研究者・開発者用のライブラリであり、ダウンロードするにはnVidiaのAccelerated Computing Developer Programのメンバーになる必要があります。
      | メンバー登録自体は簡単で、nVidiaのサイトでアカウントを作成するだけです。
    p
      a(href='https://developer.nvidia.com/cudnn', target='_blank') nVidiaのcuDNNダウンロードサイト
      | に行きDownloadボタンをクリックします。
      a(href='https://developer.nvidia.com/cudnn', target='_blank')
        img(src='image/deeplearning-by-tensorflow/download-cuDNN.png' alt='')
    p
      | Join Nowボタンをクリックします。
      br
      img(src='image/deeplearning-by-tensorflow/cnDNN-membership-required.png', alt='')
    p
      | Eメールアドレス、氏名、組織名、国、規約に同意ボタンをチェックし、Nextボタンをクリックします。
      br
      | 組織ではなく個人で登録する場合は組織名(Organization)の箇所は適当にIndividual Developerとでもしておけば良いです。
      br
      img(src='image/deeplearning-by-tensorflow/cuDNN-fill-basic-information.png')
      br
      | 規約について、私の視点から抑えておくべきポイントは下記の２つです。
    ul
      li
        | Developer Programにおいて、規約同意者は製品改善のための意見やフィードバックをnVidiaに与えることが期待されている。
        | だが、フィードバックの内容を勝手に公開してはならない。例えばブログ等にcuDNNにはこれこれこういう課題があってここを改善すると良い、
        | などということを書いてはならない。
      li
        | nVidiaは規約同意者をいつでもどんな理由でもDeveloper Programから退会させることができる。Developer Programで知り得た情報を
        | むやみやたらに公開してしまうと、突然Developer Program上のツールをダウンロードできなくなってしまう可能性がある。規約を守らせるための抑止力といったところか。
    p
      | 次のページに行くとアンケート形式でいくつか質問をされる。内容はここには書きませんが、それぞれ自分の状況に合うように入力し登録を完了します。
    p
      | 登録完了後再度上のDownloadボタンを押すことでcuDNNをダウンロードすることができます。
      br
      | インストール方法はメンバー登録後cuDNNのダウンロードページにあるインストールガイドに記載されているのでそちらを参考にしてください。
      | 私の環境ではダウンロードしたcuDNNのアーカイブ内のlib64/, include/ディレクトリをそのままCUDA Toolkitの$LD_LIBRARY_PATHに上書き展開しています。

    h5 3. libcupti-devのインストール
    .code
      .code-line
        | $&nbsp;
        +user-input("sudo apt-get install libcupti-dev")

    h5 4. Bazelのインストール
    p
      | 参考URL:
      a(href='https://bazel.build/versions/master/docs/install.html', target='_blank')
        | https://bazel.build/versions/master/docs/install.html
    p
      | BazelはGoogle製のビルドツールです。TensorFlowをソースからビルドする際に必要になります。
      br
      | bazelがJDK1.9に対応していないため、JDK1.9がOSにインストールされていると上記手順途中でエラーが発生します。
      | 私は下記のようにしてJava9/JDK1.9をアンインストールしました。
      br
      small
        | * 利用している他のソフトウェアがJava1.9を利用している場合はそのソフトウェアが動作しなくなる可能性があります。
        | コマンドの意味や影響がわからなければ実行しないでください。
    .code
      .code-line
        | $&nbsp;
        +user-input("sudo apt-get purge openjdk-9* java-9*")
    p 次にJDK1.8をインストールします。
    .code
      .code-line
        | $&nbsp;
        +user-input("sudo apt-get install openjdk-8-j*")
      .code-line
        | $&nbsp;
        +user-input("java -version")
      .code-line.no-copy
        | &nbsp;&nbsp;# openjdk version "1.8.x_xxx" と表示されることを確認。
    p Bazelの配布用URIとパッケージソースの追加
    .code
      .code-line
        | $&nbsp;
        +user-input('echo "deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8" | sudo tee /etc/apt/sources.list.d/bazel.list')
      .code-line
        | $&nbsp;
        +user-input("curl https://bazel.build/bazel-release.pub.gpg | sudo apt-key add -")
    p Bazelのインストール
    .code
      .code-line
        | $&nbsp;
        +user-input("sudo apt-get update && sudo apt-get install bazel")

    h5 5. PythonのVirtualenv環境のセットアップ
    p
      | TensorFlow専用のPython実行環境を作成します。Virtualenvを使うとプロジェクト専用のPythonバージョン、Pythonソフトウェアパッケージ
      | を構築できるようになります。Virtualenv環境を切り替えるとPythonのバージョンや利用できるパッケージも自由に切り替えられるようになります。
    p
      | pip3をインストールします。
    .code
      .code-line
        | $&nbsp;
        +user-input("sudo apt-get install python3-pip")
    p
      | virtualenvをインストールします。
    .code
      .code-line
        | $&nbsp;
        +user-input("sudo apt-get install python-virtualenv")
    p
      | TensorFlow用のvirtualenv環境を作成し、環境を有効にします。下記のコマンドを実行すると/home/&lt;ユーザ名&gt; ディレクトリ直下に
      | 新たにtensorflowというディレクトリを作成します。
    .code
      .code-line
        | $&nbsp;
        +user-input("virtualenv -p python3 --system-site-packages ~/tensorflow")
      .code-line
        | $&nbsp;
        +user-input("source ~/tensorflow/bin/activate")
    p
      | 環境が有効になっていればプロンプトが下記のように変化しているはずです。
    .code
      .code-line.no-copy
        | (tensorflow)$
    p
      | この状態でpip installを実行すると、このvirtualenv環境にのみpipパッケージがインストールされます。
    .indent
      p ※ちなみに環境を抜けたい場合は下記を実行すればOKです。
      .code
        .code-line
          | (tensorflow)$&nbsp;
          +user-input("deactivate")
    p
      | 次にTensorFlowで必要なパッケージをvirtualenv環境にインストールします。
    .code
      .code-line
        | (tensorflow)$&nbsp;
        +user-input("pip install six numpy wheel")

    h5 6. TensorFlowのソースをダウンロード/ビルド構成を設定する。
    p
      | まずはGithubのTensorFlowのレポジトリからソースコードをダウンロードします。
    .code
      .code-line
        | (tensorflow)$&nbsp;
        +user-input("mkdir -p ~/projects")
      .code-line
        | (tensorflow)$&nbsp;
        +user-input("cd ~/projects")
      .code-line
        | (tensorflow)$&nbsp;
        +user-input("git clone https://github.com/tensorflow/tensorflow")
      .code-line
        | (tensorflow)$&nbsp;
        +user-input("cd tensorflow")
      .code-line
        | (tensorflow)$&nbsp;
        +user-input("git checkout r1.0")
    p
      | ソースのビルド構成を設定します。下記を参考にCUDAに関係しない設定はそのままEnterでデフォルトの設定を使うようにします。
    .code
      .code-line
        | (tensorflow)$&nbsp;
        +user-input("./configure")
      .code-line.no-copy
        | Please specify the location of python. [Default is /home/ユーザ名/tensorflow/bin/python]:
      | Please specify optimization flags to use during compilation [Default is -march=native]:
      .code-line.no-copy
        | Do you wish to use jemalloc as the malloc implementation? (Linux only) [Y/n]
      .code-line.no-copy
        | Do you wish to build TensorFlow with Google Cloud Platform support? [y/N]
      .code-line.no-copy
        | Do you wish to build TensorFlow with Hadoop File System support? [y/N]
      .code-line.no-copy
        | Do you wish to build TensorFlow with the XLA just-in-time compiler (experimental)? [y/N]
      .code-line.no-copy
        | Please input the desired Python library path to use.  Default is [/home/ユーザ名/tensorflow/lib/python3.5/site-packages]
      .code-line.no-copy
        | Do you wish to build TensorFlow with OpenCL support? [y/N]
      .code-line
        | Do you wish to build TensorFlow with CUDA support? [y/N]&nbsp;&nbsp;
        +user-input("Y")
      .code-line.no-copy
        | CUDA support will be enabled for TensorFlow
      .code-line.no-copy
        | Please specify which gcc should be used by nvcc as the host compiler. [Default is /usr/bin/gcc]:
      .code-line
        | Please specify the Cuda SDK version you want to use, e.g. 7.0. [Leave empty to use system default]:&nbsp;&nbsp;
        +user-input("8.0")
      .code-line.no-copy
        | Please specify the location where CUDA 8.0 toolkit is installed. Refer to README.md for more details. [Default is /usr/local/cuda]:
      .code-line
        | Please specify the cuDNN version you want to use. [Leave empty to use system default]:&nbsp;&nbsp;
        +user-input('5')
      .code-line.no-copy
        | Please specify the location where cuDNN 5 library is installed. Refer to README.md for more details. [Default is /usr/local/cuda]:
      .code-line.no-copy
        | Please specify a list of comma-separated Cuda compute capabilities you want to build with.
      .code-line.no-copy
        | You can find the compute capability of your device at: https://developer.nvidia.com/cuda-gpus.
      .code-line.no-copy
        | Please note that each additional compute capability significantly increases your build time and binary size.
      .code-line
        | [Default is: "3.5,5.2"]: &nbsp;&nbsp;
        +user-input('3.5')
    .indent
      p ちなみに私の環境ではここで下記のようなエラーが出力されてしまいました。
      code.
        ERROR: /home/ユーザ名/projects/tensorflow/tensorflow/python/BUILD:2275:1: every rule of type _py_wrap_cc implicitly depends upon the target '@swig//:templates', but this target could not be found because of: no such package '@swig//': Error downloading [http://bazel-mirror.storage.googleapis.com/ufpr.dl.sourceforge.net/project/swig/swig/swig-3.0.8/swig-3.0.8.tar.gz, http://ufpr.dl.sourceforge.net/project/swig/swig/swig-3.0.8/swig-3.0.8.tar.gz, http://pilotfiber.dl.sourceforge.net/project/swig/swig/swig-3.0.8/swig-3.0.8.tar.gz] to /home/ユーザ名/.cache/bazel/_bazel_ユーザ名/3f6df72b6e217920e9a8b0ddfd37c24d/external/swig/swig-3.0.8.tar.gz: All mirrors are down: [].
        ERROR: Evaluation of query "deps((//tensorflow/... - //tensorflow/examples/android/...))" failed: errors were encountered while computing transitive closure.
      p
        | 私が確認した限りでは、tensorflowの外部依存パッケージ'swig'のダウンロードタイムアウトが原因のエラーのようです。
        br
        | curlコマンドで上記エラー内の"bazel-mirror.storage.googleapis.com"と"pilotfiber.dl.sourceforge.net"および"pilotfiber.dl.sourceforge.net"
        | に対してswig-3.0.8.tar.gzのダウンロードを試してみたところ、"bazel-mirror.storage.googleapis.com"以外の2つのミラーサイトの反応が遅いことがわかりました。
        | (数秒待てばダウンロード自体は始まります)。
        | おそらくbazelはパッケージのダウンロードに対するレスポンスタイムアウトの閾値が厳しく設定されており、
        | パッケージの配信サーバがもたつくとサーバがダウンしていると判断してしまうようです。
      p
        | この問題を解決するため、 tensorflow/tensorflow/workspace.bzl ファイルを下記のように修正し、
        | レスポンスが遅い２つのサーバをダウンロードリストから外して再度
        code.code ./configure
        | コマンドを実行したところ、無事エラーなくコマンドが完了しました。
      .code.file-edit
        | native.new_http_archive(
        | &nbsp;&nbsp;&nbsp;&nbsp;name = "swig",
        | &nbsp;&nbsp;&nbsp;&nbsp;sha256 = "58a475dbbd4a4d7075e5fe86d4e54c9edde39847cdb96a3053d87cb64a23a453",
        | &nbsp;&nbsp;&nbsp;&nbsp;urls = [
        | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"http://bazel-mirror.storage.googleapis.com/ufpr.dl.sourceforge.net/project/swig/swig/swig-3.0.8/swig-3.0.8.tar.gz",
        br
        span.strike-through
          | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"http://ufpr.dl.sourceforge.net/project/swig/swig/swig-3.0.8/swig-3.0.8.tar.gz",
        | &nbsp;←この行を削除
        br
        span.strike-through
          | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"http://pilotfiber.dl.sourceforge.net/project/swig/swig/swig-3.0.8/swig-3.0.8.tar.gz",
        | &nbsp;←この行を削除
        br
        | &nbsp;&nbsp;&nbsp;&nbsp;],
        | &nbsp;&nbsp;&nbsp;&nbsp;strip_prefix = "swig-3.0.8",
        | &nbsp;&nbsp;&nbsp;&nbsp;build_file = str(Label("//third_party:swig.BUILD")),
        | )
      p
        | 同じようなエラーが発生した方は上記の方法を試してみてください。
        code.code ./configure
        | コマンドの実行が完了したあとは、ソースコードを
        code.code git reset --hard
        | で戻しておきましょう。

    h5 7. TensorFlowのソースをビルドする。
    p
      | bazel buildでソースをビルドします。
      br
      | ちなみに私のマシン(CPU: i7-2600K@3.9GHz, 4C8T, RAM: 16GB)では23分かかりました。
      | CPU使用率もほとんどの時間で8コアとも使用率100%、メモリも見ていた限り最大で11GBほど使用していました。
      | 他の作業と同時並行でビルドするのはやめたほうが良いです。他のアプリを閉じたうえでビルドしましょう。
    .code
      .code-line
        | (tensorflow)$
        +user-input("bazel build -c opt --copt=-mavx --copt=-mavx2 --copt=-mfma --copt=-mfpmath=both --copt=-msse4.2 --config=cuda //tensorflow/tools/pip_package:build_pip_package")
    p
      | 上記のコマンドが完了すると、bazel-bin/tensorflow/tools/pip_package/build_pip_packageというファイルが作成されます。
      | そのファイル名の通り、TensorFlowのpipパッケージを作成するツールです。

    h5 8. TensorFlowのpipパッケージを作成し、インストールする。
    p
      | カスタムビルドしたTensorFlowをpipパッケージ化します。
      | 下記のコマンドを実行すると、/tmp/tensorflow_pkgディレクトリ直下にpipパッケージファイル(~.whl)を生成します。
      | このコマンドは先程までとは違い、20秒ほどで完了します。
    .code
      .code-line
        | (tensorflow)$&nbsp;
        +user-input("bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg")
    p
      | 生成された.whlファイルでpipインストールします。
    .code
      .code-line
        | (tensorflow)$&nbsp;
        +user-input("pip install $(ls /tmp/tensorflow_pkg/*.whl)")
      .code-line.no-copy
        | ...
      .code-line.no-copy
        | Successfully installed protobuf-3.2.0 tensorflow-1.0.0
    p
      | これでTensorFlowのソースインストールは完了です。

    h5 9. インストールの検証
    p
      | TensorFlowが正しくインストールされたか確認します。
    .code
      .code-line.no-copy
        | # tensorflowのプロジェクトディレクトリにいるままだとエラーがでるのでディレクトリを出ます。
      .code-line
        | (tensorflow)$&nbsp;
        +user-input('cd ../')
      .code-line
        | (tensorflow)$&nbsp;
        +user-input('python')
      .code-line
        | >>>&nbsp;
        +user-input('import tensorflow as tf')
      .code-line
        | >>>&nbsp;
        +user-input("hello = tf.constant('Hello world')")
      .code-line
        | >>>&nbsp;
        +user-input('sess = tf.Session()')
      .code-line
        | >>>&nbsp;
        +user-input('print(sess.run(hello))')
      .code-line.no-copy
        | # b'Hello world' と表示されればOKです。

  +disqus()